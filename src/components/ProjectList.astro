---
import type { Project } from '../lib/projects';
import { kFormatter } from '../utils';

const { projects } = Astro.props;
---

<div class='grid grid-cols-12 gap-5'>
	{
		projects.map((project: Project, idx: number) => {
			const tags = project.tags || [];
			return (
				<div
					class='col-span-12 sm:col-span-6 lg:col-span-4 border dark:border-zinc-700 rounded-xl shadow-2xs p-5 project-card transform transition-all duration-500 hover:scale-105 hover:shadow-xl relative overflow-hidden group'
					id={`project-card-${idx}`}
					data-index={idx}>
					{/* Animated background effect */}
					<div class='absolute inset-0 bg-gradient-to-br from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 z-0'></div>
					
					<div class='relative z-10'>
						{/* Logo frame with AI-themed project logos */}
						<div class='flex justify-center mb-4'>
							<div class='w-16 h-16 rounded-lg border-2 border-gray-200 dark:border-zinc-700 flex items-center justify-center bg-white dark:bg-zinc-800 shadow-sm'>
								{
									(() => {
										// AI-themed project logos
										if (project.name.includes("Tran Dai Nghia")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Education Logo">
													<rect width="48" height="48" fill="url(#aiGradient1)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient1" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#3b82f6"/>
															<stop offset="100%" stop-color="#8b5cf6"/>
														</linearGradient>
													</defs>
													{/* Neural network style elements */}
													<circle cx="16" cy="16" r="3" fill="white"/>
													<circle cx="32" cy="16" r="3" fill="white"/>
													<circle cx="24" cy="24" r="3" fill="white"/>
													<circle cx="16" cy="32" r="3" fill="white"/>
													<circle cx="32" cy="32" r="3" fill="white"/>
													{/* Connection lines */}
													<line x1="16" y1="16" x2="32" y2="16" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													<line x1="16" y1="16" x2="24" y2="24" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													<line x1="32" y1="16" x2="24" y2="24" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													<line x1="24" y1="24" x2="16" y2="32" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													<line x1="24" y1="24" x2="32" y2="32" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													<line x1="16" y1="32" x2="32" y2="32" stroke="white" stroke-width="1" stroke-dasharray="2,2"/>
													{/* Education icon */}
													<path d="M15 36 L33 36 L30 42 L18 42 Z" fill="white"/>
												</svg>
											);
										} else if (project.name.includes("Cung Nhau Hoc")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Learning Platform Logo">
													<rect width="48" height="48" fill="url(#aiGradient2)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient2" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#10b981"/>
															<stop offset="100%" stop-color="#0ea5e9"/>
														</linearGradient>
													</defs>
													{/* Brain-like neural network */}
													<path d="M24 15 Q28 12 32 15 Q35 18 32 21 Q35 24 32 27 Q28 30 24 27 Q20 30 16 27 Q13 24 16 21 Q13 18 16 15 Q20 12 24 15" fill="none" stroke="white" stroke-width="1.5"/>
													{/* Connection points */}
													<circle cx="24" cy="15" r="2" fill="white"/>
													<circle cx="32" cy="15" r="2" fill="white"/>
													<circle cx="16" cy="15" r="2" fill="white"/>
													<circle cx="32" cy="27" r="2" fill="white"/>
													<circle cx="16" cy="27" r="2" fill="white"/>
													<circle cx="24" cy="27" r="2" fill="white"/>
													{/* Learning icon */}
													<path d="M20 34 L28 34 L26 38 L22 38 Z" fill="white"/>
												</svg>
											);
										} else if (project.name.includes("Vinahost") && project.name.includes("Support")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Support Portal Logo">
													<rect width="48" height="48" fill="url(#aiGradient3)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient3" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#8b5cf6"/>
															<stop offset="100%" stop-color="#ec4899"/>
														</linearGradient>
													</defs>
													{/* Support/headset icon with AI elements */}
													<path d="M24 15 C26 15 28 17 28 19 C28 21 26 23 24 23 C22 23 20 21 20 19 C20 17 22 15 24 15 Z" fill="white"/>
													<path d="M20 23 Q18 25 18 28 L18 32 Q18 34 20 34 L28 34 Q30 34 30 32 L30 28 Q30 25 28 23" fill="none" stroke="white" stroke-width="2"/>
													{/* Neural connections */}
													<circle cx="15" cy="20" r="1.5" fill="white"/>
													<circle cx="33" cy="20" r="1.5" fill="white"/>
													<line x1="18" y1="22" x2="15" y2="20" stroke="white" stroke-width="1"/>
													<line x1="30" y1="22" x2="33" y2="20" stroke="white" stroke-width="1"/>
												</svg>
											);
										} else if (project.name.includes("Vinahost") && project.name.includes("DevOps")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI DevOps Logo">
													<rect width="48" height="48" fill="url(#aiGradient4)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient4" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#f59e0b"/>
															<stop offset="100%" stop-color="#ef4444"/>
														</linearGradient>
													</defs>
													{/* Gear with neural connections */}
													<circle cx="24" cy="24" r="8" fill="none" stroke="white" stroke-width="2"/>
													<circle cx="24" cy="24" r="3" fill="white"/>
													{/* Gear teeth */}
													<rect x="23" y="12" width="2" height="5" fill="white"/>
													<rect x="23" y="31" width="2" height="5" fill="white"/>
													<rect x="12" y="23" width="5" height="2" fill="white"/>
													<rect x="31" y="23" width="5" height="2" fill="white"/>
													{/* AI circuit connections */}
													<circle cx="12" cy="12" r="2" fill="white"/>
													<circle cx="36" cy="12" r="2" fill="white"/>
													<circle cx="12" cy="36" r="2" fill="white"/>
													<circle cx="36" cy="36" r="2" fill="white"/>
													<line x1="14" y1="12" x2="22" y2="12" stroke="white" stroke-width="1"/>
													<line x1="26" y1="12" x2="34" y2="12" stroke="white" stroke-width="1"/>
													<line x1="12" y1="14" x2="12" y2="22" stroke="white" stroke-width="1"/>
													<line x1="12" y1="26" x2="12" y2="34" stroke="white" stroke-width="1"/>
												</svg>
											);
										} else if (project.name.includes("IT Tools")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Tools Logo">
													<rect width="48" height="48" fill="url(#aiGradient5)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient5" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#ef4444"/>
															<stop offset="100%" stop-color="#f59e0b"/>
														</linearGradient>
													</defs>
													{/* Circuit board style */}
													<rect x="12" y="12" width="24" height="24" rx="2" fill="none" stroke="white" stroke-width="1" stroke-dasharray="3,3"/>
													{/* Circuit elements */}
													<circle cx="18" cy="18" r="2" fill="white"/>
													<circle cx="30" cy="18" r="2" fill="white"/>
													<circle cx="18" cy="30" r="2" fill="white"/>
													<circle cx="30" cy="30" r="2" fill="white"/>
													<rect x="22" y="22" width="4" height="4" fill="white"/>
													{/* AI connections */}
													<line x1="18" y1="20" x2="18" y2="28" stroke="white" stroke-width="1"/>
													<line x1="30" y1="20" x2="30" y2="28" stroke="white" stroke-width="1"/>
													<line x1="20" y1="18" x2="28" y2="18" stroke="white" stroke-width="1"/>
													<line x1="20" y1="30" x2="28" y2="30" stroke="white" stroke-width="1"/>
												</svg>
											);
										} else if (project.name.includes("Alibaba Cloud")) {
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Cloud Computing Logo">
													<rect width="48" height="48" fill="url(#aiGradient6)" rx="8"/>
													<defs>
														<linearGradient id="aiGradient6" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#0ea5e9"/>
															<stop offset="100%" stop-color="#06b6d4"/>
														</linearGradient>
													</defs>
													{/* Cloud with AI elements */}
													<path d="M15 25 Q20 20 25 22 Q30 20 35 25 Q33 30 25 32 Q17 30 15 25" fill="white"/>
													{/* Neural network inside cloud */}
													<circle cx="22" cy="25" r="1.5" fill="#0ea5e9"/>
													<circle cx="26" cy="23" r="1.5" fill="#0ea5e9"/>
													<circle cx="28" cy="27" r="1.5" fill="#0ea5e9"/>
													<circle cx="24" cy="29" r="1.5" fill="#0ea5e9"/>
													<line x1="22" y1="25" x2="26" y2="23" stroke="#0ea5e9" stroke-width="1"/>
													<line x1="26" y1="23" x2="28" y2="27" stroke="#0ea5e9" stroke-width="1"/>
													<line x1="28" y1="27" x2="24" y2="29" stroke="#0ea5e9" stroke-width="1"/>
													<line x1="24" y1="29" x2="22" y2="25" stroke="#0ea5e9" stroke-width="1"/>
												</svg>
											);
										} else {
											// Default AI-themed logo
											return (
												<svg width="48" height="48" viewBox="0 0 48 48" class="object-contain" aria-label="AI Project Logo">
													<rect width="48" height="48" fill="url(#aiGradientDefault)" rx="8"/>
													<defs>
														<linearGradient id="aiGradientDefault" x1="0%" y1="0%" x2="100%" y2="100%">
															<stop offset="0%" stop-color="#6366f1"/>
															<stop offset="100%" stop-color="#8b5cf6"/>
														</linearGradient>
													</defs>
													{/* Abstract AI symbol */}
													<circle cx="24" cy="20" r="5" fill="white"/>
													<path d="M18 26 L30 26 L24 34 Z" fill="white"/>
													{/* Connection lines */}
													<line x1="15" y1="15" x2="24" y2="20" stroke="white" stroke-width="1"/>
													<line x1="33" y1="15" x2="24" y2="20" stroke="white" stroke-width="1"/>
													<line x1="15" y1="33" x2="18" y2="26" stroke="white" stroke-width="1"/>
													<line x1="33" y1="33" x2="30" y2="26" stroke="white" stroke-width="1"/>
													<circle cx="15" cy="15" r="2" fill="white"/>
													<circle cx="33" cy="15" r="2" fill="white"/>
													<circle cx="15" cy="33" r="2" fill="white"/>
													<circle cx="33" cy="33" r="2" fill="white"/>
												</svg>
											);
										}
									})()
								}
							</div>
						</div>
						
						<div class='flex items-center justify-between my-2'>
							<h3 class='font-semibold'>
								<a class='underline hover:text-blue-600 dark:hover:text-blue-300 transition-colors duration-300' href={project.demoLink} target='_blank' rel={project.demoLinkRel}>
									{project.name}
								</a>
							</h3>
							{(project.stargazers_count !== undefined || project.forks_count !== undefined) && (
								<div class='flex items-center gap-3 text-xs text-zinc-500 dark:text-zinc-400'>
									{project.stargazers_count !== undefined && (
										<span class='flex items-center gap-1'>
											<img
												src='/assets/img/github-mark.svg'
												height='12'
												width='12'
												class='dark:hidden'
												alt='Stars'
												loading='lazy'
												decoding='async'
											/>
											<img
												src='/assets/img/github-mark-white.svg'
												height='12'
												width='12'
												class='hidden dark:block'
												alt='Stars'
												loading='lazy'
												decoding='async'
											/>
											{kFormatter(project.stargazers_count)}
										</span>
									)}
									{project.forks_count !== undefined && (
										<span class='flex items-center gap-1'>
											<svg
												xmlns='http://www.w3.org/2000/svg'
												width='12'
												height='12'
												fill='none'
												viewBox='0 0 24 24'
												stroke='currentColor'
												stroke-width='2'
												aria-label='Forks'>
												<path d='M6 3v12a3 3 0 0 0 3 3h6' />
												<circle cx='6' cy='3' r='3' />
												<circle cx='18' cy='18' r='3' />
											</svg>
											{kFormatter(project.forks_count)}
										</span>
									)}
								</div>
							)}
						</div>
						<div class='flex flex-wrap gap-2 w-full mb-2'>
							{tags.slice(0, 3).map((tag: string) => (
								<span class='border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-2 py-0.5 transition-all duration-300 hover:border-blue-500 dark:hover:border-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/30 transform hover:scale-105'>
									{tag}
								</span>
							))}
							{tags.length > 3 && (
								<span
									class='border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-2 py-0.5 bg-zinc-50 dark:bg-zinc-800 cursor-pointer select-none transition-all duration-300 hover:border-blue-500 dark:hover:border-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/30'
									title={tags.slice(3).join(', ')}>
									+{tags.length - 3} more
								</span>
							)}
						</div>
						<div class='text-zinc-600 dark:text-zinc-300 mb-4 min-h-[50px] transition-all duration-300'>
							<p>{project.description}</p>
						</div>
						<div class='flex justify-end gap-3 mt-4'>
							{project.postLink && (
								<a class='underline flex items-center gap-2 hover:text-blue-600 dark:hover:text-blue-300 transition-colors duration-300' href={project.postLink}>
									Article
								</a>
							)}
							{project.demoLink && (
								<a class='underline flex items-center gap-2 hover:text-blue-600 dark:hover:text-blue-300 transition-colors duration-300 group/link' href={project.demoLink} target='_blank' rel={project.demoLinkRel}>
									Demo
									<svg
										xmlns='http://www.w3.org/2000/svg'
										width='14'
										height='14'
										viewBox='0 0 24 24'
										fill='none'
										stroke='currentColor'
										stroke-width='2'
										stroke-linecap='round'
										stroke-linejoin='round'
										class='lucide lucide-external-link transition-transform duration-300 group-hover/link:translate-x-1'
										aria-label='External link'>
										<path d='M15 3h6v6' />
										<path d='M10 14 21 3' />
										<path d='M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6' />
									</svg>
								</a>
							)}
						</div>
					</div>
				</div>
			);
		})
	}
</div>

<style>
	.project-card {
		opacity: 0;
		transform: translateY(20px);
		/* Mobile Chrome optimizations */
		-webkit-transform: translate3d(0, 20px, 0);
		transform: translate3d(0, 20px, 0);
		-webkit-backface-visibility: hidden;
		backface-visibility: hidden;
		will-change: transform, opacity;
		transition: all 0.6s ease-out;
	}

	/* Visible state for animations */
	.project-card.visible {
		opacity: 1;
		-webkit-transform: translate3d(0, 0, 0);
		transform: translate3d(0, 0, 0);
	}

	/* Removed CSS animation delays - now handled by JavaScript for strict sequential order */

	/* Hover effects */
	.project-card:hover {
		-webkit-transform: translate3d(0, -8px, 0) scale(1.02);
		transform: translate3d(0, -8px, 0) scale(1.02);
		box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
		border-color: rgba(59, 130, 246, 0.3);
	}

	.dark .project-card:hover {
		box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);
		border-color: rgba(59, 130, 246, 0.5);
	}

	/* Focus effects */
	.project-card:focus-within {
		-webkit-transform: translate3d(0, -4px, 0);
		transform: translate3d(0, -4px, 0);
		box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
		border-color: rgba(59, 130, 246, 0.5);
		outline: 2px solid rgba(59, 130, 246, 0.3);
		outline-offset: 2px;
	}

	/* Link hover effects */
	.project-card h3 a {
		transition: color 0.3s ease;
	}

	.project-card:hover h3 a {
		color: rgb(59, 130, 246);
	}

	.dark .project-card:hover h3 a {
		color: rgb(147, 197, 253);
	}

	/* Tag hover effects */
	.project-card .tag {
		transition: all 0.3s ease;
	}

	.project-card:hover .tag {
		-webkit-transform: translate3d(0, -1px, 0);
		transform: translate3d(0, -1px, 0);
		border-color: rgba(59, 130, 246, 0.3);
		background-color: rgba(59, 130, 246, 0.05);
	}

	.dark .project-card:hover .tag {
		border-color: rgba(147, 197, 253, 0.3);
		background-color: rgba(59, 130, 246, 0.1);
	}

	/* Mobile Chrome fallback */
	@media (max-width: 768px) {
		.project-card {
			transition: all 0.4s ease-out;
		}
		
		/* Force visibility on mobile if animations fail */
		.mobile-fallback .project-card {
			opacity: 1 !important;
			-webkit-transform: translate3d(0, 0, 0) !important;
			transform: translate3d(0, 0, 0) !important;
		}
	}

	/* No-JS fallback */
	.no-js .project-card {
		opacity: 1 !important;
		-webkit-transform: translate3d(0, 0, 0) !important;
		transform: translate3d(0, 0, 0) !important;
	}

	/* Mobile Chrome domain-specific fix */
	@media screen and (max-width: 768px) {
		:global(.mobile-fallback) .project-card {
			opacity: 1 !important;
			transform: translate3d(0, 0, 0) !important;
		}
	}
</style>

<script>
	// Mobile Chrome domain-specific fix
	(function() {
		'use strict';
		
		// Detect mobile Chrome
		const isMobileChrome = /Chrome/.test(navigator.userAgent) && /Mobile/.test(navigator.userAgent);
		
		// Add no-js class removal
		document.documentElement.classList.remove('no-js');
		
		// Mobile Chrome specific handling
		if (isMobileChrome) {
			// Add mobile fallback class after short delay
			setTimeout(() => {
				document.documentElement.classList.add('mobile-fallback');
			}, 500);
		}
		
		function initializeAnimations() {
			const cards = document.querySelectorAll('.project-card');
			if (!cards.length) return;
			
			let hasStartedAnimation = false;
			
			// Sequential animation function that respects order
			function animateCardsInSequence() {
				if (hasStartedAnimation) return;
				hasStartedAnimation = true;
				
				// Sort cards by their data-index to ensure correct order
				const sortedCards = Array.from(cards).sort((a, b) => {
					const indexA = parseInt(a.getAttribute('data-index') || '0');
					const indexB = parseInt(b.getAttribute('data-index') || '0');
					return indexA - indexB;
				});
				
				// Animate cards sequentially with proper delays
				sortedCards.forEach((card, index) => {
					setTimeout(() => {
						card.classList.add('visible');
					}, index * 150); // 150ms stagger between each card
				});
			}
			
			// Create intersection observer to detect when section comes into view
			let observer: IntersectionObserver | null = null;
			try {
				observer = new IntersectionObserver((entries) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting && entry.intersectionRatio > 0.1) {
							animateCardsInSequence();
							if (observer) {
								observer.unobserve(entry.target);
							}
						}
					});
				}, {
					threshold: 0.1,
					rootMargin: '0px 0px -50px 0px'
				}) as IntersectionObserver;
				
				// Observe the container instead of individual cards
				const container = cards[0]?.parentElement;
				if (container && observer) {
					observer.observe(container);
				}
			} catch (e) {
				// Fallback: animate immediately
				animateCardsInSequence();
				return;
			}
			
			// Check if cards are already in viewport
			const viewportHeight = window.innerHeight;
			const firstCard = cards[0];
			if (firstCard) {
				try {
					const rect = firstCard.getBoundingClientRect();
					// If first card is already visible, start animation immediately
					if (rect.top < viewportHeight * 0.8) {
						animateCardsInSequence();
					}
				} catch (e) {
					// Fallback: animate immediately
					animateCardsInSequence();
				}
			}
			
			// Mobile Chrome domain-specific fallback
			if (isMobileChrome) {
				setTimeout(() => {
					if (!hasStartedAnimation) {
						animateCardsInSequence();
					}
				}, 1000);
			} else {
				// Standard fallback for other browsers
				setTimeout(() => {
					if (!hasStartedAnimation) {
						animateCardsInSequence();
					}
				}, 2000);
			}
		}
		
		// Multiple initialization strategies
		function safeInitialize() {
			try {
				initializeAnimations();
			} catch (e) {
				// Emergency fallback: force all cards visible
				const cards = document.querySelectorAll('.project-card');
				cards.forEach(card => card.classList.add('visible'));
			}
		}
		
		// Initialize when DOM is ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', safeInitialize);
		} else {
			safeInitialize();
		}
		
		// Additional mobile Chrome domain-specific initialization
		if (isMobileChrome) {
			setTimeout(safeInitialize, 100);
			setTimeout(safeInitialize, 500);
		}
		
		// Window load fallback
		window.addEventListener('load', () => {
			setTimeout(safeInitialize, 100);
		});
		
	})();
</script>